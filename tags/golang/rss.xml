<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on blog [dot] hook</title><link>https://blog.hook.sh/tags/golang/</link><description>Recent content in golang on blog [dot] hook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Feb 2022 06:47:03 +0000</lastBuildDate><atom:link href="https://blog.hook.sh/tags/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>Задачи для лайв-кодинга на Go</title><link>https://blog.hook.sh/interview-section-golang-coding/</link><pubDate>Tue, 08 Feb 2022 06:47:03 +0000</pubDate><guid>https://blog.hook.sh/interview-section-golang-coding/</guid><description>&lt;p>В этой заметки содержатся (и, возможно, будут периодически добавляться) задачи на лайв-кодинг для Go разработчиков, что встречаются на интервью, либо являются хорошими кандидатами для этого.&lt;/p></description></item><item><title>Вопросы и ответы для интервью Golang разработчика</title><link>https://blog.hook.sh/interview-section-golang/</link><pubDate>Wed, 02 Feb 2022 06:17:19 +0000</pubDate><guid>https://blog.hook.sh/interview-section-golang/</guid><description>&lt;p>Структурирование информации - очень полезный навык. И дабы привнести некоторый порядок в этап подготовки к интервью на должность Golang разработчика (и немножко техлида) решил записывать в этой заметке в формате FAQ те вопросы, которые я задавал, задавали мне или просто были мной найдены на просторах сети вместе с ответами на них. Стоит относиться к ним как к шпаргалке (если затупишь на реальном интервью - будет где подсмотреть) и просто набору тем, которым тебе стоит уделить внимание.&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ol>
&lt;li>&lt;a href="#расскажи-о-себе">Расскажи о себе?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#расскажи-о-своем-самом-интересном-проекте">Расскажи о своем самом интересном проекте?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#кем-был-создан-язык-какие-его-особенности">Кем был создан язык, какие его особенности?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-ооп-как-это-сделано-в-golang">Что такое ООП? Как это сделано в Golang?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроено-инвертирование-зависимостей">Как устроено инвертирование зависимостей?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-сделать-свои-методы-для-стороннего-пакета">Как сделать свои методы для стороннего пакета?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#типы-данных-и-синтаксис">Типы данных и синтаксис&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроены-строки-в-go">Как устроены строки в Go?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#в-чём-ключевое-отличие-слайса-среза-от-массива">В чём ключевое отличие слайса (среза) от массива?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-append-в-слайсе">Как работает &lt;code>append&lt;/code> в слайсе?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#задача-про-слайсы-1">Задача про слайсы #1&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-можешь-рассказать-про-map">Что можешь рассказать про &lt;code>map&lt;/code>?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-растет-map">Как растет &lt;code>map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-там-про-поиск">Что там про поиск?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#есть-ли-у-map-такие-же-методы-как-у-слайса-len-cap">Есть ли у &lt;code>map&lt;/code> такие же методы как у слайса: &lt;code>len&lt;/code>, &lt;code>cap&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-типы-ключей-разрешены-для-ключа-в-map">Какие типы ключей разрешены для ключа в &lt;code>map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#может-ли-ключом-быть-структура-если-может-то-всегда-ли">Может ли ключом быть структура? Если может, то всегда ли?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-будет-в-map-если-не-делать-make-или-short-assign">Что будет в &lt;code>map&lt;/code>, если не делать &lt;code>make&lt;/code> или &lt;code>short assign&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#race-condition-потокобезопасна-ли-мапа">Race condition. Потокобезопасна ли мапа?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-интерфейс">Что такое интерфейс?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроен-duck-typing-в-go">Как устроен Duck-typing в Go?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#интерфейсный-тип">Интерфейсный тип&lt;/a>&lt;/li>
&lt;li>&lt;a href="#пустой-interface">Пустой &lt;code>interface{}&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-замыкание">Что такое замыкание?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-битовые-операции-знаешь">Какие битовые операции знаешь?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#дополнительный-блок-фигурных-скобок-в-функции">Дополнительный блок фигурных скобок в функции&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-захват-переменной">Что такое захват переменной?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-defer">Как работает &lt;code>defer&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-init">Как работает &lt;code>init&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#прерывание-forswitch-или-forselect">Прерывание for/switch или for/select&lt;/a>&lt;/li>
&lt;li>&lt;a href="#сколько-можно-возвращать-значений-из-функции">Сколько можно возвращать значений из функции?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#дженерики---это-про-что">Дженерики - это про что?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#параметризованные-функции">Параметризованные функции&lt;/a>&lt;/li>
&lt;li>&lt;a href="#параметризованные-типы">Параметризованные типы&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#память-и-управление-ей">Память и управление ей&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#что-такое-heap-и-stack">Что такое &lt;code>heap&lt;/code> и &lt;code>stack&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#где-выделяется-память-под-переменную-можно-ли-этим-управлять">Где выделяется память под переменную? Можно ли этим управлять?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какое-поведение-по-умолчанию-используется-в-go-при-передаче-в-функцию">Какое поведение по умолчанию используется в Go при передаче в функцию?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-можешь-рассказать-про-escape-analysis">Что можешь рассказать про escape analysis?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#сoncurrency-конкурентность">Сoncurrency (конкурентность)&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроен-мьютекс">Как устроен мьютекс?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#в-чем-отличие-syncmutex-от-syncrwmutex">В чем отличие &lt;code>sync.Mutex&lt;/code> от &lt;code>sync.RWMutex&lt;/code>?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-synсmap">Что такое &lt;code>synс.Map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-ещё-примитивы-синхронизации-знаешь">Какие ещё примитивы синхронизации знаешь?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#syncwaitgroup">&lt;code>sync.WaitGroup&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#synccond">&lt;code>sync.Cond&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#synconce">&lt;code>sync.Once&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#syncpool">&lt;code>sync.Pool&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#какие-типы-каналов-существуют">Какие типы каналов существуют?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#что-можно-делать-с-закрытым-каналом">Что можно делать с закрытым каналом?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#расскажи-про-планировщик-горутин">Расскажи про планировщик (горутин)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-горутина">Что такое горутина?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#в-чем-отличия-горутин-от-потов-ос">В чем отличия горутин от потов ОС?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#где-аллоцируется-память-для-горутин">Где аллоцируется память для горутин?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-завершить-много-горутин">Как завершить много горутин?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#кейсы-использования-контекста">Кейсы использования контекста&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#contextwithcancel">&lt;code>context.WithCancel()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithdeadline">&lt;code>context.WithDeadline()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithtimeout">&lt;code>context.WithTimeout()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithvalue">&lt;code>context.WithValue()&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#как-задетектить-гонку">Как задетектить гонку?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#тестирование">Тестирование&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#tdt-table-driven-tests-табличное-тестирование">TDT, Table-driven tests (табличное тестирование)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#имя-пакета-с-тестами">Имя пакета с тестами&lt;/a>&lt;/li>
&lt;li>&lt;a href="#статические-анализаторы-линтеры">Статические анализаторы (линтеры)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ошибка-в-бенчмарке">Ошибка в бенчмарке&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-про-функциональное-тестирование">Что про функциональное тестирование?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#профилирование-pprof">Профилирование (&lt;code>pprof&lt;/code>)&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#пример-использования-pprof">Пример использования &lt;code>pprof&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#так-как-же-профилировщик-работает-в-принципе">Так как же профилировщик работает в принципе?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#компилятор">Компилятор&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#какие-директивы-компилятора-знаешь">Какие директивы компилятора знаешь?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#golinkname">&lt;code>//go:linkname&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonosplit">&lt;code>//go:nosplit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonorace">&lt;code>//go:norace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonoinline">&lt;code>//go:noinline&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonoescape">&lt;code>//go:noescape&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gobuild">&lt;code>//go:build&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gogenerate">&lt;code>//go:generate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#goembed">&lt;code>//go:embed&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/nav>
&lt;/div></description></item></channel></rss>