<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog [dot] hook</title><link>https://blog.hook.sh/</link><description>Recent content on blog [dot] hook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Feb 2022 06:47:03 +0000</lastBuildDate><atom:link href="https://blog.hook.sh/rss.xml" rel="self" type="application/rss+xml"/><item><title>Задачи для лайв-кодинга на Go</title><link>https://blog.hook.sh/interview-section-golang-coding/</link><pubDate>Tue, 08 Feb 2022 06:47:03 +0000</pubDate><guid>https://blog.hook.sh/interview-section-golang-coding/</guid><description>&lt;img src="https://blog.hook.sh/interview-section-golang-coding/cover.png" alt="Featured image of post Задачи для лайв-кодинга на Go" />&lt;p>В этой заметки содержатся (и, возможно, будут периодически добавляться) задачи на лайв-кодинг для Go разработчиков, что встречаются на интервью, либо являются хорошими кандидатами для этого.&lt;/p></description></item><item><title>Вопросы и ответы для интервью Golang разработчика</title><link>https://blog.hook.sh/interview-section-golang/</link><pubDate>Wed, 02 Feb 2022 06:17:19 +0000</pubDate><guid>https://blog.hook.sh/interview-section-golang/</guid><description>&lt;img src="https://blog.hook.sh/interview-section-golang/cover.png" alt="Featured image of post Вопросы и ответы для интервью Golang разработчика" />&lt;p>Структурирование информации - очень полезный навык. И дабы привнести некоторый порядок в этап подготовки к интервью на должность Golang разработчика (и немножко техлида) решил записывать в этой заметке в формате FAQ те вопросы, которые я задавал, задавали мне или просто были мной найдены на просторах сети вместе с ответами на них. Стоит относиться к ним как к шпаргалке (если затупишь на реальном интервью - будет где подсмотреть) и просто набору тем, которым тебе стоит уделить внимание.&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ol>
&lt;li>&lt;a href="#расскажи-о-себе">Расскажи о себе?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#расскажи-о-своем-самом-интересном-проекте">Расскажи о своем самом интересном проекте?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#кем-был-создан-язык-какие-его-особенности">Кем был создан язык, какие его особенности?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-ооп-как-это-сделано-в-golang">Что такое ООП? Как это сделано в Golang?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроено-инвертирование-зависимостей">Как устроено инвертирование зависимостей?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-сделать-свои-методы-для-стороннего-пакета">Как сделать свои методы для стороннего пакета?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#типы-данных-и-синтаксис">Типы данных и синтаксис&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроены-строки-в-go">Как устроены строки в Go?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#в-чём-ключевое-отличие-слайса-среза-от-массива">В чём ключевое отличие слайса (среза) от массива?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-append-в-слайсе">Как работает &lt;code>append&lt;/code> в слайсе?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#задача-про-слайсы-1">Задача про слайсы #1&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-можешь-рассказать-про-map">Что можешь рассказать про &lt;code>map&lt;/code>?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-растет-map">Как растет &lt;code>map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-там-про-поиск">Что там про поиск?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#есть-ли-у-map-такие-же-методы-как-у-слайса-len-cap">Есть ли у &lt;code>map&lt;/code> такие же методы как у слайса: &lt;code>len&lt;/code>, &lt;code>cap&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-типы-ключей-разрешены-для-ключа-в-map">Какие типы ключей разрешены для ключа в &lt;code>map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#может-ли-ключом-быть-структура-если-может-то-всегда-ли">Может ли ключом быть структура? Если может, то всегда ли?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-будет-в-map-если-не-делать-make-или-short-assign">Что будет в &lt;code>map&lt;/code>, если не делать &lt;code>make&lt;/code> или &lt;code>short assign&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#race-condition-потокобезопасна-ли-мапа">Race condition. Потокобезопасна ли мапа?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-интерфейс">Что такое интерфейс?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроен-duck-typing-в-go">Как устроен Duck-typing в Go?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#интерфейсный-тип">Интерфейсный тип&lt;/a>&lt;/li>
&lt;li>&lt;a href="#пустой-interface">Пустой &lt;code>interface{}&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-замыкание">Что такое замыкание?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-битовые-операции-знаешь">Какие битовые операции знаешь?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#дополнительный-блок-фигурных-скобок-в-функции">Дополнительный блок фигурных скобок в функции&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-захват-переменной">Что такое захват переменной?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-defer">Как работает &lt;code>defer&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-работает-init">Как работает &lt;code>init&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#прерывание-forswitch-или-forselect">Прерывание for/switch или for/select&lt;/a>&lt;/li>
&lt;li>&lt;a href="#сколько-можно-возвращать-значений-из-функции">Сколько можно возвращать значений из функции?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#память-и-управление-ей">Память и управление ей&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#что-такое-heap-и-stack">Что такое &lt;code>heap&lt;/code> и &lt;code>stack&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#где-выделяется-память-под-переменную-можно-ли-этим-управлять">Где выделяется память под переменную? Можно ли этим управлять?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какое-поведение-по-умолчанию-используется-в-go-при-передаче-в-функцию">Какое поведение по умолчанию используется в Go при передаче в функцию?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-можешь-рассказать-про-escape-analysis">Что можешь рассказать про escape analysis?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#сoncurrency-конкурентность">Сoncurrency (конкурентность)&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#как-устроен-мьютекс">Как устроен мьютекс?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#в-чем-отличие-syncmutex-от-syncrwmutex">В чем отличие &lt;code>sync.Mutex&lt;/code> от &lt;code>sync.RWMutex&lt;/code>?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#что-такое-synсmap">Что такое &lt;code>synс.Map&lt;/code>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#какие-ещё-примитивы-синхронизации-знаешь">Какие ещё примитивы синхронизации знаешь?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#syncwaitgroup">&lt;code>sync.WaitGroup&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#synccond">&lt;code>sync.Cond&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#synconce">&lt;code>sync.Once&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#syncpool">&lt;code>sync.Pool&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#какие-типы-каналов-существуют">Какие типы каналов существуют?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#что-можно-делать-с-закрытым-каналом">Что можно делать с закрытым каналом?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#расскажи-про-планировщик-горутин">Расскажи про планировщик (горутин)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-такое-горутина">Что такое горутина?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#в-чем-отличия-горутин-от-потов-ос">В чем отличия горутин от потов ОС?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#где-аллоцируется-память-для-горутин">Где аллоцируется память для горутин?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#как-завершить-много-горутин">Как завершить много горутин?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#кейсы-использования-контекста">Кейсы использования контекста&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#contextwithcancel">&lt;code>context.WithCancel()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithdeadline">&lt;code>context.WithDeadline()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithtimeout">&lt;code>context.WithTimeout()&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contextwithvalue">&lt;code>context.WithValue()&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#как-задетектить-гонку">Как задетектить гонку?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#тестирование">Тестирование&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#tdt-table-driven-tests-табличное-тестирование">TDT, Table-driven tests (табличное тестирование)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#имя-пакета-с-тестами">Имя пакета с тестами&lt;/a>&lt;/li>
&lt;li>&lt;a href="#статические-анализаторы-линтеры">Статические анализаторы (линтеры)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ошибка-в-бенчмарке">Ошибка в бенчмарке&lt;/a>&lt;/li>
&lt;li>&lt;a href="#что-про-функциональное-тестирование">Что про функциональное тестирование?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#профилирование-pprof">Профилирование (&lt;code>pprof&lt;/code>)&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#пример-использования-pprof">Пример использования &lt;code>pprof&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#так-как-же-профилировщик-работает-в-принципе">Так как же профилировщик работает в принципе?&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#компилятор">Компилятор&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#какие-директивы-компилятора-знаешь">Какие директивы компилятора знаешь?&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#golinkname">&lt;code>//go:linkname&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonosplit">&lt;code>//go:nosplit&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonorace">&lt;code>//go:norace&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonoinline">&lt;code>//go:noinline&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gonoescape">&lt;code>//go:noescape&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gobuild">&lt;code>//go:build&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gogenerate">&lt;code>//go:generate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#goembed">&lt;code>//go:embed&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/nav>
&lt;/div></description></item><item><title>Led-подсветка для Xiaomi Mi M365 Pro своими руками</title><link>https://blog.hook.sh/mi-m365-pro-led-backlight/</link><pubDate>Fri, 26 Feb 2021 10:01:21 +0000</pubDate><guid>https://blog.hook.sh/mi-m365-pro-led-backlight/</guid><description>&lt;img src="https://blog.hook.sh/mi-m365-pro-led-backlight/cover.jpg" alt="Featured image of post Led-подсветка для Xiaomi Mi M365 Pro своими руками" />&lt;p>Как пользователь электро-самоката M365 версии Pro со стажем — могу смело заявить, что &lt;strong>быть заметным&lt;/strong> как для участников дорожного движения, так и пешеходного — очень важно. Если передвигаясь днём по обочине дорог и/или тротуару можно считать что твоя заметность &lt;em>достаточна&lt;/em> для других участников движения &lt;em>(недостаток с лихвой компенсируется светоотражающим жилетом)&lt;/em>, то вот в темное время суток картина сильно меняется. Особенно это чувствуется при движении по тротуару со включенной фарой - особенность устройства и расположения фары на самокате таковы, что идущих тебе на встречу ты просто слепишь, а сзади тебя не видно от слова совсем.&lt;/p>
&lt;p>Задавшись вопросом &amp;ldquo;как это можно исправить&amp;rdquo; было принято решение интегрировать пару led-лент в днище самоката так, что бы они освещали землю под ним (тем самым обозначая твоё местоположение для других) и чтоб при этом надежность примененного решения не вызывала сомнения. Ниже будет в меру подробное описание того, как подсветка была имплементирована, какие комплектующие для этого были выбраны, их цены и с какими сложностями столкнулся.&lt;/p></description></item><item><title>Настройка iptables для swarm кластера</title><link>https://blog.hook.sh/iptables-for-docker-swarm/</link><pubDate>Mon, 06 Jul 2020 15:11:47 +0000</pubDate><guid>https://blog.hook.sh/iptables-for-docker-swarm/</guid><description>&lt;img src="https://blog.hook.sh/iptables-for-docker-swarm/cover.jpg" alt="Featured image of post Настройка iptables для swarm кластера" />Однажды я решил поднять свой крохотный кластер для приложений, запускаемых в docker-контейнерах. Выбор был между nomad (уже не один комрад его настоятельно рекомендовал - обязательно попробую, но позже), K8S (слишком сложно и дорого по ресурсам для pet-проекта) и Docker Swarm (никакого дополнительного софта не потребуется, поставляется вместе с самим докером). Как ты понимаешь - выбор пал именно на последний.
По тому как его поднять и базово настроить - материалов полно, но когда дело дошло до настройки огненной стены - вот тут начались некоторые трудности.</description></item><item><title>Пули свищут, народ мрет — красота!</title><link>https://blog.hook.sh/adrian-karton-di-viart/</link><pubDate>Sun, 20 Jan 2019 07:52:56 +0000</pubDate><guid>https://blog.hook.sh/adrian-karton-di-viart/</guid><description>&lt;img src="https://blog.hook.sh/adrian-karton-di-viart/cover.jpg" alt="Featured image of post Пули свищут, народ мрет — красота!" />&lt;p>Хочу рассказать про мужика-медоеда. Этот отморозок вызывает во мне искреннее восхищение.&lt;/p>
&lt;p>Жил-был Адриан Картон ди Виарт. Родился он в 1880 году в Бельгии, в аристократической семье. Чуть ли не с самого рождения он проявил хуевый характер: был вспыльчивым до бешенства, несдержанным, и все споры предпочитал разрешать, уебав противника без предупреждения.&lt;/p>
&lt;p>Когда Адриану исполнилось 17 лет, аристократический папа спихнул его в Оксфорд, и вздохнул с облегчением. Но в университете блистательный отпрыск не успевал по всем предметам. Кроме спорта. Там он был первым. Ну и еще бухать умел.&lt;/p>
&lt;p>— Хуйня какая-то эти ваши науки, — решил Адриан. — Вам не сделать из меня офисного хомячка.&lt;/p></description></item><item><title>Деплой на Docker Swarm</title><link>https://blog.hook.sh/compose-deploy/</link><pubDate>Mon, 15 Oct 2018 13:35:50 +0000</pubDate><guid>https://blog.hook.sh/compose-deploy/</guid><description>&lt;img src="https://blog.hook.sh/compose-deploy/cover.png" alt="Featured image of post Деплой на Docker Swarm" />&lt;blockquote>
&lt;p>Данный пост является переводом &lt;a class="link" href="https://docs.docker.com/compose/compose-file/#deploy" target="_blank" rel="noopener"
>части документации&lt;/a>, посвященной секции &lt;code>deploy&lt;/code> в &lt;code>docker-compose&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="deploy">&lt;code>deploy&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>Начиная с &lt;a class="link" href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-3" target="_blank" rel="noopener"
>версии &lt;strong>3&lt;/strong>&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Группа настроек, посвященная деплою и запуску сервисов. Указанные в данной группе настройки используются &lt;strong>только&lt;/strong> при деплое на &lt;a class="link" href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener"
>swarm&lt;/a> используя &lt;a class="link" href="https://docs.docker.com/engine/reference/commandline/stack_deploy/" target="_blank" rel="noopener"
>&lt;code>docker stack deploy&lt;/code>&lt;/a>, и игнорируется при использовании команд &lt;code>docker-compose up&lt;/code> и &lt;code>docker-compose run&lt;/code>.&lt;/p></description></item><item><title>Docker + Laravel = ❤</title><link>https://blog.hook.sh/laravel-in-docker/</link><pubDate>Mon, 01 Oct 2018 08:29:51 +0000</pubDate><guid>https://blog.hook.sh/laravel-in-docker/</guid><description>&lt;img src="https://blog.hook.sh/laravel-in-docker/cover.png" alt="Featured image of post Docker + Laravel = ❤" />&lt;blockquote>
&lt;p>Данная статья является копией &lt;a class="link" href="https://habr.com/post/425101/" target="_blank" rel="noopener"
>публикации на хабре&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>В данной статье я расскажу о своём опыте &amp;ldquo;заворачивания&amp;rdquo; Laravel-приложения в Docker-контейнер да так, что бы и локально с ним могли работать frontend и backend разработчики, и запуск его на production был максимально прост. Так же CI будет автоматически запускать статические анализаторы кода, &lt;code>phpunit&lt;/code>-тесты, производить сборку образов.&lt;/p></description></item><item><title>Отключаем кэширование загружаемых RequireJS файлов при разработке</title><link>https://blog.hook.sh/disable-cacheing-requirejs-files-while-develop/</link><pubDate>Sun, 19 Feb 2017 19:16:00 +0000</pubDate><guid>https://blog.hook.sh/disable-cacheing-requirejs-files-while-develop/</guid><description>&lt;img src="https://blog.hook.sh/disable-cacheing-requirejs-files-while-develop/cover.jpg" alt="Featured image of post Отключаем кэширование загружаемых RequireJS файлов при разработке" />&lt;p>Мне нравится &lt;a class="link" href="http://requirejs.org/" target="_blank" rel="noopener"
>RequireJS&lt;/a>. Нравятся принцип построения приложения с его использованием, то как он работает с зависимостями, его гибкость и настраиваемость. Но часто может возникать проблема при разработке на локале - кэширование ресурсов браузером &lt;em>(файл подправил, а изменения не отображаются, так как файл берется из кэша)&lt;/em>.&lt;/p>
&lt;p>Можно, конечно, открыть консоль и поставить флаг запрещающий кэширование, можно подправить конфиг web-демона так, чтоб он запрещал кэширование, а можно пойти другим путем - заставить requirejs добавлять рандомный параметр к своим запросам, таким образом заставляя браузер не брать файл из кэша.&lt;/p></description></item><item><title>Синглтон для RequireJS</title><link>https://blog.hook.sh/requirejs-singletone/</link><pubDate>Sat, 18 Feb 2017 05:19:58 +0000</pubDate><guid>https://blog.hook.sh/requirejs-singletone/</guid><description>&lt;img src="https://blog.hook.sh/requirejs-singletone/cover.jpg" alt="Featured image of post Синглтон для RequireJS" />&lt;p>Частенько при разработке приложения с использованием &lt;a class="link" href="http://requirejs.org/" target="_blank" rel="noopener"
>requirejs&lt;/a> возникает необходимость в реализации &lt;a class="link" href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D1%87%D0%BA%D0%B0_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29" target="_blank" rel="noopener"
>паттерна синглтона&lt;/a>. И вот, испробовав пример его реализации что описан ниже заявляю - он имеет право на жизнь. Не без своих недостатков, разумеется, но в целом вполне применибельно:&lt;/p></description></item><item><title>Отзыв о cloud4box.com</title><link>https://blog.hook.sh/cloud4box-com-review/</link><pubDate>Sat, 20 Aug 2016 06:27:33 +0000</pubDate><guid>https://blog.hook.sh/cloud4box-com-review/</guid><description>Данный пост - предостережение тем, кто решил приобрести у них какие-либо услуги, и услуги VPS - в частности. Тем, кто перед оплатой решил поискать о них отзывы. Ниже будет аргументированное мнение, почему они являются куском говна:
Нет информации про юрлицо, лицензии и т.д.; Покупают положительные отзывы. Мне предлагали зачисление на мой баланс месячной стоимости аренды VPS сервера за позитивный пост об их услугах в блоге или соц. сетях. Это сразу насторожило, но сперва не придал этому значения.</description></item><item><title>Поднимаем свой, приватный прокси-сервер</title><link>https://blog.hook.sh/setup-private-proxy-server/</link><pubDate>Sat, 13 Aug 2016 10:57:36 +0000</pubDate><guid>https://blog.hook.sh/setup-private-proxy-server/</guid><description>&lt;img src="https://blog.hook.sh/setup-private-proxy-server/cover.jpg" alt="Featured image of post Поднимаем свой, приватный прокси-сервер" />&lt;p>Сегодня мы будем поднимать анонимный и действительно шустренький proxy/socks сервер для себя-любимого. Так чтоб настроить его один раз, да и забыть - пускай пыхтит да нам на радость.&lt;/p>
&lt;p>Будем считать что ты уже приобрел себе простенький vps, в качестве ОС выбрал Cent OS 7 и подцепился к нему по SSH, наблюдая девственную чистоту. Первым делом тюним SSH:&lt;/p></description></item><item><title>Дружим rclone с Яндекс.Диском</title><link>https://blog.hook.sh/rclone-work-with-yandex-disk/</link><pubDate>Wed, 13 Jul 2016 17:24:26 +0000</pubDate><guid>https://blog.hook.sh/rclone-work-with-yandex-disk/</guid><description>&lt;img src="https://blog.hook.sh/rclone-work-with-yandex-disk/cover.jpg" alt="Featured image of post Дружим rclone с Яндекс.Диском" />&lt;p>Сегодня мы поговорим об одном интересном, простом в обращении и в какой-то мере уникальном инструменте. Знакомьтесь: &lt;a class="link" href="http://rclone.org/" target="_blank" rel="noopener"
>rclone&lt;/a>. Разработчики описывают его краткой и ёмкой фразой - &amp;ldquo;rsync для облачных хранилищ&amp;rdquo;.&lt;/p></description></item><item><title>Собираем и настраиваем msmtp</title><link>https://blog.hook.sh/compile-and-config-msmtp/</link><pubDate>Tue, 28 Jun 2016 22:24:10 +0000</pubDate><guid>https://blog.hook.sh/compile-and-config-msmtp/</guid><description>&lt;img src="https://blog.hook.sh/compile-and-config-msmtp/cover.jpg" alt="Featured image of post Собираем и настраиваем msmtp" />&lt;p>&lt;a class="link" href="http://msmtp.sourceforge.net/" target="_blank" rel="noopener"
>msmtp&lt;/a> - это простой консольный клиент для отправки сообщений электронной почты по протоколу SMTP.&lt;/p>
&lt;p>Можно, конечно, пойти сложным путем и поставить полноценный почтовый сервер, но зачем? Нам ведь требуется просто позволить скриптам и демонам отправлять почту, а заморачиваться с DKIM, SPF, заголовками и прочим - крайне лень. Поэтому мы будем отправлять почту с помощью почтового ящика на yandex.ru, и поможет нам в этом приложение под названием &lt;a class="link" href="http://msmtp.sourceforge.net/" target="_blank" rel="noopener"
>msmtp&lt;/a>.&lt;/p></description></item><item><title>Брутим пароли с Гидрой (hydra)</title><link>https://blog.hook.sh/hydra-bruteforce-passwd/</link><pubDate>Wed, 12 Aug 2015 10:05:15 +0000</pubDate><guid>https://blog.hook.sh/hydra-bruteforce-passwd/</guid><description>&lt;img src="https://blog.hook.sh/hydra-bruteforce-passwd/cover.jpg" alt="Featured image of post Брутим пароли с Гидрой (hydra)" />&lt;blockquote>
&lt;p>Статья носит носит строго познавательный характер, за применение кем либо описанных в статье методик автор ответственности не несет.&lt;/p>
&lt;/blockquote>
&lt;p>В тот момент, когда пинтест заходит в тупик - одним из крайних аргументов в тесте на проникновение является подбор паролей. Сервисы, к которым можно применить данный метод атаки - самые различные. А как следствие - различны и протоколы, и форматы обращений. Надо бы как то унифицировать инструменты для решения этой задачи - не хорошо под каждый новый случай писать новый брутер своими ручками.&lt;/p></description></item><item><title>Прошивка роутера Asus RT-G32 ver. C1</title><link>https://blog.hook.sh/firmware-rt-g32/</link><pubDate>Sat, 18 Jul 2015 10:10:13 +0000</pubDate><guid>https://blog.hook.sh/firmware-rt-g32/</guid><description>&lt;img src="https://blog.hook.sh/firmware-rt-g32/cover.jpg" alt="Featured image of post Прошивка роутера Asus RT-G32 ver. C1" />&lt;p>При прошивки данной железки возникают некоторые вопросы, ответы на которые найти порой не так просто. Сейчас постараюсь ответить на основные:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Можно ли установить на него dd-wrt или open-wrt?&lt;/strong> - Нет, не заведется, к сожалению&lt;/li>
&lt;li>&lt;strong>Можно ли установить &lt;a class="link" href="http://sourceforge.net/projects/wive-ng/" target="_blank" rel="noopener"
>wive-ng&lt;/a>?&lt;/strong> - Да, но &amp;ldquo;глючит&amp;rdquo; на столько, что работать с железкой в итоге не представляется возможным&lt;/li>
&lt;li>&lt;strong>Можно ли после экспериментов &amp;ldquo;откатиться&amp;rdquo; на официальную версию?&lt;/strong> - Да, и это делается очень просто&lt;/li>
&lt;/ul></description></item><item><title>Маленькая хитрость iptables</title><link>https://blog.hook.sh/little-iptables-tips/</link><pubDate>Tue, 14 Jul 2015 08:59:58 +0000</pubDate><guid>https://blog.hook.sh/little-iptables-tips/</guid><description>&lt;img src="https://blog.hook.sh/little-iptables-tips/cover.jpg" alt="Featured image of post Маленькая хитрость iptables" />При сканировании портов целевой системы можно довольно часто наблюдать результат вида:
... 8080/tcp filtered http-proxy ... Что говорит нам о том что порт наверняка используется системой, но &amp;ldquo;прикрыт&amp;rdquo; извне. Несмотря на то, что работать с ним врятли будет возможно - он всё же дает исследуемому дополнительную информацию об исследуемой системе.
Как проще всего прикрыть порт извне используя iptables?
$ iptables -A INPUT -p tcp --dport %номер_порта% -j DROP А как можно прикрыть его так, чтоб он был недоступен только лишь извне, да ещё и не отображался в результатах nmap как filtered?</description></item><item><title>SSH Honeypot — просто и со вкусом</title><link>https://blog.hook.sh/ssh-honeypot/</link><pubDate>Mon, 13 Jul 2015 11:13:57 +0000</pubDate><guid>https://blog.hook.sh/ssh-honeypot/</guid><description>&lt;img src="https://blog.hook.sh/ssh-honeypot/cover.jpg" alt="Featured image of post SSH Honeypot — просто и со вкусом" />&lt;blockquote>
&lt;p>&lt;strong>Honeypot («Ловушка»)&lt;/strong> (англ. горшочек с мёдом) — ресурс, представляющий собой приманку для злоумышленников. (&lt;a class="link" href="https://ru.wikipedia.org/wiki/Honeypot" target="_blank" rel="noopener"
>wikipedia.org&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>Одно из первых средств, которое применяется для аудита целевых систем - это сканирование портов с целью выявления, какие же службы (&lt;em>сервисы&lt;/em>) там крутятся. Можете даже сейчас натравить &lt;code>nmap&lt;/code> на свой сервер и посмотреть, что же он нам о нем расскажет. Самый простой пример результата его работы:&lt;/p></description></item><item><title>Небольшая коллекция интересных гифок (часть 1)</title><link>https://blog.hook.sh/little-gifs-collection-part1/</link><pubDate>Mon, 18 May 2015 15:45:35 +0000</pubDate><guid>https://blog.hook.sh/little-gifs-collection-part1/</guid><description>&lt;p>Где их использовать? Фоновые изображения страниц авторизации, ошибок, анимация. Врубай своё воображение ;) Осторожно - трафик!&lt;/p>
&lt;img src="https://hsto.org/files/b35/77d/375/b3577d3758dd4eb78001815f05467faf.gif" class="wide-post-image" alt=''></description></item><item><title>Прошивка принтера Samsung ML-1860</title><link>https://blog.hook.sh/hack-printer-samsung-ml-1860/</link><pubDate>Mon, 18 May 2015 15:20:41 +0000</pubDate><guid>https://blog.hook.sh/hack-printer-samsung-ml-1860/</guid><description>&lt;img src="https://blog.hook.sh/hack-printer-samsung-ml-1860/cover.jpg" alt="Featured image of post Прошивка принтера Samsung ML-1860" />&lt;p>В самом аппарате есть программное обеспечение (ПО), которое отвечает за все действия. При помощи этого ПО производится отсчет распечатанных страниц с чипа картриджа. Когда допустимое количество листов будет отпечатано, устройство блокируется. И заправкой картриджа, как вы понимаете здесь не обойтись.&lt;/p>
&lt;p>Решением сложившейся ситуации служит прошивка новым программным обеспечением ваш принтер. В обновленном ПО отсутствует счетчик страниц и уровень тонера всегда 100%.&lt;/p></description></item><item><title>Настройка страниц ошибок для nginx</title><link>https://blog.hook.sh/customize-nginx-error-pages/</link><pubDate>Tue, 03 Mar 2015 06:41:38 +0000</pubDate><guid>https://blog.hook.sh/customize-nginx-error-pages/</guid><description>&lt;img src="https://blog.hook.sh/customize-nginx-error-pages/cover.jpg" alt="Featured image of post Настройка страниц ошибок для nginx" />&lt;p>При работе с web-ресурсом возникают ошибки, и причина их может быть совершенно различна - от опечатки в URL, до ошибок самого сервера. И если у нас внешним сервером является nginx - мы можем довольно удобно указать свое содержание, которое будет выводиться при той или иной ситуации. Во-первых, это позволяет в какой-то мере замаскировать используемое ПО (т.к. определение по сигнатурам ответа становится невозможным); во-вторых - это визуальная кастомизация, которая положительно говорит о ресурсе в целом.&lt;/p></description></item></channel></rss>