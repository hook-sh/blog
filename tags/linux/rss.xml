<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on blog [dot] hook</title><link>https://blog.hook.sh/tags/linux/</link><description>Recent content in linux on blog [dot] hook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Jul 2020 15:11:47 +0000</lastBuildDate><atom:link href="https://blog.hook.sh/tags/linux/rss.xml" rel="self" type="application/rss+xml"/><item><title>Настройка iptables для swarm кластера</title><link>https://blog.hook.sh/iptables-for-docker-swarm/</link><pubDate>Mon, 06 Jul 2020 15:11:47 +0000</pubDate><guid>https://blog.hook.sh/iptables-for-docker-swarm/</guid><description>Однажды я решил поднять свой крохотный кластер для приложений, запускаемых в docker-контейнерах. Выбор был между nomad (уже не один комрад его настоятельно рекомендовал - обязательно попробую, но позже), K8S (слишком сложно и дорого по ресурсам для pet-проекта) и Docker Swarm (никакого дополнительного софта не потребуется, поставляется вместе с самим докером). Как ты понимаешь - выбор пал именно на последний.
По тому как его поднять и базово настроить - материалов полно, но когда дело дошло до настройки огненной стены - вот тут начались некоторые трудности.</description></item><item><title>Деплой на Docker Swarm</title><link>https://blog.hook.sh/compose-deploy/</link><pubDate>Mon, 15 Oct 2018 13:35:50 +0000</pubDate><guid>https://blog.hook.sh/compose-deploy/</guid><description>&lt;blockquote>
&lt;p>Данный пост является переводом &lt;a class="link" href="https://docs.docker.com/compose/compose-file/#deploy" target="_blank" rel="noopener"
>части документации&lt;/a>, посвященной секции &lt;code>deploy&lt;/code> в &lt;code>docker-compose&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="deploy">&lt;code>deploy&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>Начиная с &lt;a class="link" href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-3" target="_blank" rel="noopener"
>версии &lt;strong>3&lt;/strong>&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Группа настроек, посвященная деплою и запуску сервисов. Указанные в данной группе настройки используются &lt;strong>только&lt;/strong> при деплое на &lt;a class="link" href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener"
>swarm&lt;/a> используя &lt;a class="link" href="https://docs.docker.com/engine/reference/commandline/stack_deploy/" target="_blank" rel="noopener"
>&lt;code>docker stack deploy&lt;/code>&lt;/a>, и игнорируется при использовании команд &lt;code>docker-compose up&lt;/code> и &lt;code>docker-compose run&lt;/code>.&lt;/p></description></item><item><title>Docker + Laravel = ❤</title><link>https://blog.hook.sh/laravel-in-docker/</link><pubDate>Mon, 01 Oct 2018 08:29:51 +0000</pubDate><guid>https://blog.hook.sh/laravel-in-docker/</guid><description>&lt;blockquote>
&lt;p>Данная статья является копией &lt;a class="link" href="https://habr.com/post/425101/" target="_blank" rel="noopener"
>публикации на хабре&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>В данной статье я расскажу о своём опыте &amp;ldquo;заворачивания&amp;rdquo; Laravel-приложения в Docker-контейнер да так, что бы и локально с ним могли работать frontend и backend разработчики, и запуск его на production был максимально прост. Так же CI будет автоматически запускать статические анализаторы кода, &lt;code>phpunit&lt;/code>-тесты, производить сборку образов.&lt;/p></description></item><item><title>Собираем и настраиваем msmtp</title><link>https://blog.hook.sh/compile-and-config-msmtp/</link><pubDate>Tue, 28 Jun 2016 22:24:10 +0000</pubDate><guid>https://blog.hook.sh/compile-and-config-msmtp/</guid><description>&lt;p>&lt;a class="link" href="http://msmtp.sourceforge.net/" target="_blank" rel="noopener"
>msmtp&lt;/a> - это простой консольный клиент для отправки сообщений электронной почты по протоколу SMTP.&lt;/p>
&lt;p>Можно, конечно, пойти сложным путем и поставить полноценный почтовый сервер, но зачем? Нам ведь требуется просто позволить скриптам и демонам отправлять почту, а заморачиваться с DKIM, SPF, заголовками и прочим - крайне лень. Поэтому мы будем отправлять почту с помощью почтового ящика на yandex.ru, и поможет нам в этом приложение под названием &lt;a class="link" href="http://msmtp.sourceforge.net/" target="_blank" rel="noopener"
>msmtp&lt;/a>.&lt;/p></description></item><item><title>Брутим пароли с Гидрой (hydra)</title><link>https://blog.hook.sh/hydra-bruteforce-passwd/</link><pubDate>Wed, 12 Aug 2015 10:05:15 +0000</pubDate><guid>https://blog.hook.sh/hydra-bruteforce-passwd/</guid><description>&lt;blockquote>
&lt;p>Статья носит носит строго познавательный характер, за применение кем либо описанных в статье методик автор ответственности не несет.&lt;/p>
&lt;/blockquote>
&lt;p>В тот момент, когда пинтест заходит в тупик - одним из крайних аргументов в тесте на проникновение является подбор паролей. Сервисы, к которым можно применить данный метод атаки - самые различные. А как следствие - различны и протоколы, и форматы обращений. Надо бы как то унифицировать инструменты для решения этой задачи - не хорошо под каждый новый случай писать новый брутер своими ручками.&lt;/p></description></item><item><title>SSH Honeypot — просто и со вкусом</title><link>https://blog.hook.sh/ssh-honeypot/</link><pubDate>Mon, 13 Jul 2015 11:13:57 +0000</pubDate><guid>https://blog.hook.sh/ssh-honeypot/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Honeypot («Ловушка»)&lt;/strong> (англ. горшочек с мёдом) — ресурс, представляющий собой приманку для злоумышленников. (&lt;a class="link" href="https://ru.wikipedia.org/wiki/Honeypot" target="_blank" rel="noopener"
>wikipedia.org&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>Одно из первых средств, которое применяется для аудита целевых систем - это сканирование портов с целью выявления, какие же службы (&lt;em>сервисы&lt;/em>) там крутятся. Можете даже сейчас натравить &lt;code>nmap&lt;/code> на свой сервер и посмотреть, что же он нам о нем расскажет. Самый простой пример результата его работы:&lt;/p></description></item><item><title>Настройка страниц ошибок для nginx</title><link>https://blog.hook.sh/customize-nginx-error-pages/</link><pubDate>Tue, 03 Mar 2015 06:41:38 +0000</pubDate><guid>https://blog.hook.sh/customize-nginx-error-pages/</guid><description>&lt;p>При работе с web-ресурсом возникают ошибки, и причина их может быть совершенно различна - от опечатки в URL, до ошибок самого сервера. И если у нас внешним сервером является nginx - мы можем довольно удобно указать свое содержание, которое будет выводиться при той или иной ситуации. Во-первых, это позволяет в какой-то мере замаскировать используемое ПО (т.к. определение по сигнатурам ответа становится невозможным); во-вторых - это визуальная кастомизация, которая положительно говорит о ресурсе в целом.&lt;/p></description></item></channel></rss>